version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:14-alpine
    container_name: usenetsync-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-usenetsync}
      POSTGRES_USER: ${DB_USER:-usenetsync}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-changeme}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=en_US.UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    networks:
      - usenetsync-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-usenetsync}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: usenetsync-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - usenetsync-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # API Backend
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: usenetsync-api
    restart: unless-stopped
    environment:
      # Database
      DATABASE_URL: postgresql://${DB_USER:-usenetsync}:${DB_PASSWORD:-changeme}@postgres:5432/${DB_NAME:-usenetsync}
      
      # Redis
      REDIS_URL: redis://redis:6379/0
      
      # Security
      SECRET_KEY: ${SECRET_KEY:-change-me-in-production}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY:-change-me-in-production}
      
      # Usenet
      USENET_SERVER: ${USENET_SERVER:-news.newshosting.com}
      USENET_PORT: ${USENET_PORT:-563}
      USENET_SSL: ${USENET_SSL:-true}
      USENET_USERNAME: ${USENET_USERNAME}
      USENET_PASSWORD: ${USENET_PASSWORD}
      
      # Application
      APP_ENV: ${APP_ENV:-production}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      CORS_ORIGINS: ${CORS_ORIGINS:-http://localhost:3000}
    volumes:
      - ./uploads:/var/lib/usenetsync/uploads
      - ./temp:/var/lib/usenetsync/temp
      - ./logs:/var/log/usenetsync
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8000:8000"
    networks:
      - usenetsync-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend (for development)
  frontend:
    image: node:18-alpine
    container_name: usenetsync-frontend
    working_dir: /app
    command: sh -c "npm install && npm run dev -- --host 0.0.0.0"
    environment:
      VITE_API_URL: ${VITE_API_URL:-http://localhost:8000}
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "3000:5173"
    networks:
      - usenetsync-network
    profiles:
      - development

  # Nginx (for production)
  nginx:
    image: nginx:alpine
    container_name: usenetsync-nginx
    restart: unless-stopped
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./frontend/dist:/usr/share/nginx/html:ro
      - ./ssl:/etc/nginx/ssl:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - api
    networks:
      - usenetsync-network
    profiles:
      - production

  # Adminer (Database Management)
  adminer:
    image: adminer:latest
    container_name: usenetsync-adminer
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres
      ADMINER_DESIGN: pepa-linha
    networks:
      - usenetsync-network
    profiles:
      - development

  # Backup Service
  backup:
    image: postgres:14-alpine
    container_name: usenetsync-backup
    environment:
      PGPASSWORD: ${DB_PASSWORD:-changeme}
    volumes:
      - ./backups:/backups
    command: >
      sh -c "while true; do
        pg_dump -h postgres -U ${DB_USER:-usenetsync} ${DB_NAME:-usenetsync} | gzip > /backups/backup_$$(date +%Y%m%d_%H%M%S).sql.gz;
        find /backups -name 'backup_*.sql.gz' -mtime +7 -delete;
        sleep 86400;
      done"
    depends_on:
      - postgres
    networks:
      - usenetsync-network
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  usenetsync-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/16